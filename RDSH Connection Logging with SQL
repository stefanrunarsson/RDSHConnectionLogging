# Author:          Stefan Runarsson
# Date:            30/06/2023
# 
# Before using ensure to update the required variables for the site
# Requires (to be installed on the RDSH hosts):
#  Either SQLcmd or SQLPowershell 
#  PSTerminalServices powershell module
#  Account to run the scheduled task under (you can use the local system account if desired)
#  WMI permissions must be granted on the RDSH Gateway server to allow the account to query for session info
#
#  Note: At the moment it classes both logoffs and disconnects as disconnects
#  This is due to them both logging event 24, with the logoff event 23 happening before event ID 24
#  Usually happens too quickly for the script to capture the logoff before the disconnect event and has not been worth checking previous events to compare session IDs
#
#**********************************************************************************************************************


#---------------------------------------------------------------------
#                   Create Required Objects and Initialise Variables
#---------------------------------------------------------------------

# Import required Modules
Import-Module PSTerminalServices 

# Internal IP address of the RD Gateway server
# Used to check the external IP address details for external connections
$RDGatewayIP = "X.X.X.X"

# SQL Server name hosting the database
$SQLServer = sql.internal.domain.co.nz
# SQL database name
$Database = "RDSHActivity"

# RDSH Server running the script (this is the endpoint of the connection)
$Server = $Env:ComputerName

# Clear the error variable
$Error.Clear()
#Don't report any errors that crop up - prevents the flash of red in the powershell console should it be visible.
$ErrorActionPreference = "SilentlyContinue"

#---------------------------------------------------------------------
#                   Main Script
#---------------------------------------------------------------------

#Read in the latest Windows event
$Event = Get-WinEvent -LogName "Microsoft-Windows-TerminalServices-LocalSessionManager/Operational" -MaxEvents 5| Where-Object {$_.ID -eq 21 -or $_.ID -eq 25 -or $_.ID -eq 24}
#Get the session info from the event
[string]$DomainUser = $Event[0].Properties[0].Value
[string]$SessionID = $Event[0].Properties[1].Value
[string]$ConnectionTime = $Event[0].TimeCreated.ToString('yyyy-MM-dd HH:mm:ss')

#Split the username and domain, keep only the username
$UserName = $DomainUser.Split("\")[1]

#Determine if the session is a new one or a reconnection
$ClientName = $(Get-TSSession $SessionID).ClientName
Switch ($Event[0].ID)
{
  21 { [string]$ConnectionStatus = "New Logon" }
  25 { [string]$ConnectionStatus = "Reconnection" }
  23 { [string]$ConnectionStatus = "Logged Off" }
  24 { [string]$ConnectionStatus = "Disconnected" }  
}

#Skip gathering IP/location info if this is a disconnect
If (!($Event[0].ID -eq 24))
{ 
  #If the reported IP is the RDG server, query the gateway to get information on the remote connection 
  If ($($Event[0].Properties[2].Value) -match $RDGatewayIP)
  {
    $ConnectionType = "External"
    $SessionInfo = Get-WmiObject -class "Win32_TSGatewayConnection" -namespace "root\cimv2\TerminalServices" -Computer $RDGatewayIP -Authentication 6 | Where {$_.UserName -eq $DomainUser}
    $ClientIP = $SessionInfo.ClientAddress
    $GeoDetails = Invoke-RestMethod -Uri "https://ipinfo.io/$ClientIP"
    $City = $GeoDetails.City
    $Region = $GeoDetails.Region
    $Country = $GeoDetails.Country
    $ISP = $GeoDetails.Org
  } Else {
    $ConnectionType = "Internal"
	  $ClientIP = $Event[0].Properties[2].Value
    Switch -wildcard($ClientIP)
    {
      "10.11.*.*" { $Office = "Victoria Street"; Break }
      "10.12.*.*" { $Office = "Wigram"; Break }
      "10.13.*.*" { $Office = "Ferrymead"; Break }
      "10.14.*.*" { $Office = "Papanui"; Break }
      Default { $ConnectionType = "External"; $Office = "Direct RDP" }
    }
  }
}  

$SQLQuery="
INSERT INTO dbo.Logging
           (UserName
           ,ConnectionTime
           ,RDSHost
           ,ConnectionStatus
           ,ClientName
           ,ClientIP
           ,ConnectionType
           ,Office
           ,City
           ,Region
           ,Country
           ,ISP)
     VALUES
           ('$UserName'
           ,'$ConnectionTime'
           ,'$Server'
           ,'$ConnectionStatus'
           ,'$ClientName'
           ,'$ClientIP'
           ,'$ConnectionType'
           ,'$Office'
           ,'$City'
           ,'$Region'
           ,'$Country'
           ,'$ISP')
GO"

# Either call the powershell SQL module, or the sqlcmd that is installed
#Invoke-SQLcmd -ServerInstance $SQLServer -query $SQLQuery -Database $Database
& "C:\Program Files\Microsoft SQL Server\Client SDK\ODBC\170\Tools\Binn\sqlcmd" -S $SQLServer -d $Database -E -Q $SQLQuery
